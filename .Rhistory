"Promoting Interoperability Score" = "This is the unweighted score received by the participant for the Promoting Interoperability performance category, the score that is used for the final score. MIPS APM participants receive their APM Entity roll-up score unless this category was reported by the APM Entity.",
"Improvement Activities Score" = "The score received for the improvement activities performance category based on all the activities picked for the category that contributed to the final score.",
"Cost Score" = "The unweighted score received for the cost performance category based on all the cost measures used for final scoring. Will display as “0” for 2021 as cost was reweighted in the 2021 performance year.",
## BOOLEANS
Engaged = "Indicates if the clinician reported a minimum of one measure or activity as an individual or group, OR participated in a MIPS APM.",
"Opted into MIPS" = "Indicates if an Opt-In Eligible clinician or group elected to participate in MIPS and receive a payment adjustment. An Opt-In Eligible clinician or group is one that is otherwise eligible for MIPS and exceeds 1 or 2, but not all 3 low-volume threshold criteria",
"Small Practitioner" = "Indicates if the clinician or group had the small practice special (15 or fewer clinicians billed under the TIN) based on either segment of the MIPS eligibility determination period. Note: This number can contradict the Practice Size column which is always based on the 2nd segment.",
"Rural Clinician" = "Indicates if the clinician or group had the rural special status (practiced in a ZIP code designated as rural by the Federal Office of Rural Health Policy (FORHP) using the most recent FORHP Eligible ZIP code file available).",
"HPSA Clinician" = "Indicates if the clinician or group had the HPSA special status (practiced in a Health Professional Shortage Area (HPSA).",
"Ambulatory Surgical Center" = "Indicates if the clinician or group had the ambulatory surgical center-based special status (determined by the volume of their covered professional services furnished in an ambulatory surgical center.)",
"Hospital-Based Clinician" = "Indicates if the clinician or group had the hospital-based special status (determined by the volume of their covered professional services furnished in a hospital setting).",
"Non-Patient Facing" = "Indicates if the clinician or group has the non-patient facing special status (determined by volume of Medicare Part B patient-facing encounters, including telehealth services).",
"Facility-Based" = "Indicates if the clinician or group has the facility-based special status (based on volume of services furnished in a facility eligible for the Hospital Value-based Purchasing program).",
"Extreme Hardship" = "Indicates if the clinician, group or APM Entity was affected by an extreme and uncontrollable circumstance (EUC) (such as FEMA-designated major disaster) and qualified for performance category reweighting because of the MIPS automatic EUC policy or MIPS EUC exception application.",
"Extreme Hardship Quality" = "Indicates if the clinician, group or APM Entity was approved for reweighting of the quality performance category due to extreme and uncontrollable circumstances.",
"Extreme Hardship PI" = "Indicates if the clinician, group or APM Entity was approved for reweighting of the Promoting Interoperability performance category due to extreme and uncontrollable circumstances.",
"PI Hardship" = "Indicates if the clinician or group was approved for an exception from the Promoting Interoperability performance category due to participation in a small practice, decertified Electronic Health Record (EHR) technology, insufficient Internet connectivity, or lack of control over the availability of certified EHR technology (CEHRT).",
"PI Reweighting" = "Indicates if the clinician or group qualified for an automatic reweighting from the Promoting Interoperability performance category due to special status or clinician specialty.",
"PI Bonus" = "The total bonus points received by the clinician, group or APM Entity for the Promoting Interoperability performance category.",
"Extreme Hardship IA" = "Indicates if the clinician, group or APM Entity was approved for reweighting of the improvement activities performance category due to extreme and uncontrollable circumstances.",
"IA Study" = "This data element will show as FALSE for everyone because this study concluded after the 2019 performance year.",
"Extreme Hardship Cost" = "Indicates if the clinician or group was approved for reweighting of the cost performance category due to extreme and uncontrollable circumstances. Not applicable for 2021; this category was reweighted for all individuals and groups.",
## INDIVIDUAL MEASURE SCORES
"Quality Measure ID" = "MIPS Quality ID for one of 10 possible quality measures that contributed to the final score.",
"Quality Measure Score" = "Score (plus bonus points) achieved for corresponding MIPS Quality ID that contributed to the final score.",
"PI Measure ID" = "MIPS Promoting Interoperability ID for one of 11 possible Promoting Interoperability measures that contributed to the final score.",
"PI Measure Score" = "Measure score achieved for the corresponding MIPS Promoting Interoperability ID that contributed to the final score.",
"IA Measure ID" = "MIPS Improvement Activity ID for one of 4 possible improvement activities that contributed to the final score.",
"IA Measure Score" = "Activity score achieved for the corresponding MIPS Improvement Activity ID that contributed to the final score.",
"Cost Measure ID" = "MIPS Cost ID for one of 2 possible cost measures that contributed to the final score. Not applicable for 2021; this category was reweighted for all individuals and groups.",
"Cost Measure Score" = "Cost score achieved for the corresponding MIPS Cost ID that contributed to the final score. Not applicable for 2021; this category was reweighted for all individuals and groups.",
"PI CEHRT ID" = "This is a unique identifier generated by the Office of the National Coordinator for Health Information Technology (ONC) and identifies a specific bundle of software or EHR. The CEHRT ID is a 15-character alpha-numeric string which can be found on the CHPL website. This is the CEHRT ID included in the data that contributed to the clinician’s final score.") |>
tidyr::pivot_longer(
cols = dplyr::everything(),
names_to = "Field",
values_to = "Description") |>
dplyr::mutate(col = dplyr::row_number(), .before = Field) |>
gt::gt(rowname_col = "col") |>
gt::tab_header(title = gt::md("**Quality Payment API** Data Dictionary")) |>
gt::opt_align_table_header("left") |>
gt::opt_stylize(color = "red") |>
gt::tab_source_note(source_note = gt::md("If **Participation Type** = `Group`, Beneficiaries are attributed to the TIN, not the Individual Clinician. If **Participation Type** = `APM Entity`, fields related to the Low-Volume Threshold and Special Status (columns 9 – 19) are attributed to the Clinician’s Group (TIN), not the APM Entity. Beginning in 2021, CMS won’t evaluate APM Entities for the Low-Volume Threshold."))
library(provider)               # <1>
library(tidyverse)              # <1>
abbott_qpp <- 2017:2021 |>      # <2>
map(\(x) quality_payment(     # <2>
year = x,                   # <2>
npi = 1730455775)) |>       # <2>
list_rbind()                  # <3>
abbott_qpp |>
select(year,
final_score,
practice_size,
part_type,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct,
complex_patient_bonus,
quality_category_score,
quality_improvement_bonus,
pi_category_score,
ia_score,
cost_score) |>
provider:::gt_prov()
abbott_qpp
abbott_qpp |>
select(year,
npi,
part_type,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct) |>
gt::gt()
abbott_qpp
abbott_qpp |>
select(year,
npi,
part_type,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct) |>
gt::gt()
abbott_qpp |>
select(year,
npi,
part_type,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct) |>
gt::gt() |>
gt::opt_stylize(color = "red")
abbott_qpp |>
select(year,
npi,
part_type,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct) |>
gt::gt(rowname_col = "year") |>
gt::opt_stylize(color = "red")
abbott_qpp |>
select(year,
npi,
part_type,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct) |>
gt::gt(rowname_col = "year") |>
gt::opt_stylize(color = "red") |>
gt::text_transform(fn = toupper, locations = gt::cells_column_labels())
gt::opt_stylize(color = "red") |>
gt::text_transform(fn = toupper,
locations = gt::cells_column_labels())
abbott_qpp |>
select(year,
npi,
part_type,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct) |>
gt::gt(rowname_col = "year") |>
gt::cols_label(part_type = "PARTICIPATION",
allowed_charges = "CHARGES",
pmt_adj_pct = "PAYMENT ADJUSTMENT") |>
gt::opt_stylize(color = "red") |>
gt::text_transform(fn = toupper,
locations = gt::cells_column_labels())
abbott_qpp |>
select(year,
final_score,
complex_patient_bonus,
quality_category_score,
quality_improvement_bonus,
pi_category_score,
ia_score,
cost_score)
abbott_qpp |>
select(year,
Final = final_score,
Quality = quality_category_score,
"Performance Improvement" = pi_category_score,
"Improvement Activities" = ia_score,
Cost = cost_score,
complex_patient_bonus,
quality_improvement_bonus)
abbott_qpp
abbott_qpp |>
select(year,
npi,
part_type,
specialty,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct) |>
gt::gt(rowname_col = "year") |>
gt::cols_label(part_type = "PARTICIPATION",
allowed_charges = "CHARGES",
pmt_adj_pct = "PAYMENT ADJUSTMENT") |>
gt::opt_stylize(color = "red") |>
gt::text_transform(fn = toupper,
locations = gt::cells_column_labels())
abbott_qpp |>
select(year,
npi,
part_type,
specialty,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct)
abbott_qpp |>
select(year,
npi,
part_type,
specialty,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct) |>
gt::gt(rowname_col = "year") |>
gt::fmt_number() |>
gt::cols_label(part_type = "PARTICIPATION",
allowed_charges = "CHARGES",
pmt_adj_pct = "PAYMENT ADJUSTMENT") |>
gt::opt_stylize(color = "red") |>
gt::text_transform(fn = toupper,
locations = gt::cells_column_labels())
abbott_qpp |>
select(year,
npi,
part_type,
specialty,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct) |>
gt::gt(rowname_col = "year") |>
gt::fmt_number(
columns = c(beneficiaries,
allowed_charges,
services), decimals = 0) |>
gt::cols_label(part_type = "PARTICIPATION",
allowed_charges = "CHARGES",
pmt_adj_pct = "PAYMENT ADJUSTMENT") |>
gt::opt_stylize(color = "red") |>
gt::text_transform(fn = toupper,
locations = gt::cells_column_labels())
abbott_qpp |>
select(year,
contains("quality_measure")) |>
tidyr::pivot_longer(!year,
names_to = "type",
values_to = "val") |>
tidyr::separate_wider_delim(type, "_",
names = c("q", "m", "type", "qm_no")) |>
tidyr::unite("name",
c("q", "m"),
remove = TRUE,
sep = " ") |>
tidyr::pivot_wider(names_from = type,
values_from = val,
values_fn = list) |>
tidyr::unnest(cols = c(id, score)) |>
filter(!is.na(id))
hussain_qpp <- 2017:2021 |>
furrr::future_map(\(x) quality_payment(
year = x,
npi = 1043477615)) |>
purrr::list_rbind()
hussain_qpp |>
select(year,
final_score,
practice_size,
part_type,
beneficiaries,
allowed_charges,
services,
pmt_adj_pct,
complex_patient_bonus,
quality_category_score,
quality_improvement_bonus,
pi_category_score,
ia_score,
cost_score) |>
provider:::gt_prov()
hussain_qpp |>
select(year,
contains("quality_measure")) |>
tidyr::pivot_longer(!year,
names_to = "type",
values_to = "val") |>
tidyr::separate_wider_delim(type, "_",
names = c("q", "m", "type", "qm_no")) |>
tidyr::unite("name",
c("q", "m"),
remove = TRUE,
sep = " ") |>
tidyr::pivot_wider(names_from = type,
values_from = val,
values_fn = list) |>
tidyr::unnest(cols = c(id, score)) |>
filter(!is.na(id))
cms::locality_dict
cms::locality_dict
fs::dir_ls()
fs::path_wd()
cms::mpfs20_oh
x <- cms::get_mpfs(20, keep_downloads = FALSE)
x <- cms::get_mpfs(20, storage_path = 'storage', keep_downloads = FALSE)
gc()
devtools::install_github("debruine/glossary")
gc()
file.choose()
measures_2019 <- jsonlite::fromJSON("C:/Users/andyb/Desktop/provider_book/data/measures-data_2019.json")
measures_2019
abbott_measures <- abbott_qpp |>
select(year,
contains("quality_measure")) |>
tidyr::pivot_longer(!year,
names_to = "type",
values_to = "val") |>
tidyr::separate_wider_delim(type, "_",
names = c("q", "m", "type", "qm_no")) |>
tidyr::unite("name",
c("q", "m"),
remove = TRUE,
sep = " ") |>
tidyr::pivot_wider(names_from = type,
values_from = val,
values_fn = list) |>
tidyr::unnest(cols = c(id, score)) |>
filter(!is.na(id))
abbott_measures
abbott_measures |> left_join(measures_2019, by = join_by(id == measureId))
abbott_measures |>
left_join(measures_2019,
by = join_by(id == measureId)) |>
unnest()
abbott_measures |>
left_join(measures_2019,
by = join_by(id == measureId)) |>
unnest(cols = c(submissionMethods, measureSets, measureSpecification, strata, eligibilityOptions,
performanceOptions, substitutes))
abbott_measures |>
left_join(measures_2019,
by = join_by(id == measureId)) |>
unnest(cols = c(
#submissionMethods,
measureSets,
measureSpecification,
strata,
eligibilityOptions,
performanceOptions,
substitutes
))
abbott_measures |>
left_join(measures_2019,
by = join_by(id == measureId)) |>
unnest(cols = c(
#submissionMethods,
#measureSets,
measureSpecification,
#strata,
#eligibilityOptions,
#performanceOptions,
#substitutes
))
measures_2019
jsonlite::fromJSON("C:/Users/andyb/Desktop/provider_book/data/measures-data_2019.json") |>
unnest(cols = c(submissionMethods))
measures_2019$measureSets
abbott_qpp
measures_2019$reportingCategory
jsonlite::fromJSON("C:/Users/andyb/Desktop/provider_book/data/measures-data_2019.json") |>
unnest(cols = c(reportingCategory))
names(measures_2019)
measures_2019 <- jsonlite::fromJSON("C:/Users/andyb/Desktop/provider_book/data/measures-data_2019.json") |>
mutate(year = 2019, .before = title) |>
unnest(cols = c(reportingCategory))
names(measures_2019)
measures_2019
count(measures_2019$category)
measures_2019 |> count(category)
abbott_measures
abbott_qpp |>
select(year,
contains("quality_measure"))
abbott_qpp |>
select(year,
contains("quality_measure")) |>
tidyr::pivot_longer(!year,
names_to = "type",
values_to = "val")
abbott_qpp |>
select(year,
contains("quality_measure")) |>
tidyr::pivot_longer(!year,
names_to = "type",
values_to = "val") |>
tidyr::separate_wider_delim(type, "_",
names = c("q", "m", "type", "qm_no"))
abbott_qpp |>
select(year,
contains("quality_measure")) |>
tidyr::pivot_longer(!year,
names_to = "type",
values_to = "val") |>
tidyr::separate_wider_delim(type, "_",
names = c("category", "m", "type", "group"))
abbott_qpp |>
select(year,
contains("quality_measure")) |>
tidyr::pivot_longer(!year,
names_to = "type",
values_to = "val") |>
tidyr::separate_wider_delim(type, "_",
names = c("category", "m", "type", "group")) |>
# tidyr::unite("name",
#              c("q", "m"),
#              remove = TRUE,
#              sep = " ") |>
tidyr::pivot_wider(names_from = type,
values_from = val,
values_fn = list)
abbott_qpp |>
select(year,
contains("quality_measure")) |>
tidyr::pivot_longer(!year,
names_to = "type",
values_to = "val") |>
tidyr::separate_wider_delim(type, "_",
names = c("category", "m", "type", "group"))
abbott_qpp |>
select(year,
contains("quality_measure")) |>
tidyr::pivot_longer(!year,
names_to = "type",
values_to = "val") |>
tidyr::separate_wider_delim(type, "_",
names = c("category", "m", "type", "group")) |>
mutate(m = NULL) |>
tidyr::pivot_wider(names_from = type,
values_from = val,
values_fn = list)
abbott_qpp |>
select(year,
contains("quality_measure")) |>
tidyr::pivot_longer(!year,
names_to = "type",
values_to = "val") |>
tidyr::separate_wider_delim(type, "_",
names = c("category", "m", "type", "group")) |>
mutate(m = NULL) |>
tidyr::pivot_wider(names_from = type,
values_from = val,
values_fn = list) |>
tidyr::unnest(cols = c(id, score))
abbott_measures <- abbott_qpp |>
select(year,
contains("quality_measure")) |>
tidyr::pivot_longer(!year,
names_to = "type",
values_to = "val") |>
tidyr::separate_wider_delim(type, "_",
names = c("category", "m", "type", "group")) |>
mutate(m = NULL) |>
tidyr::pivot_wider(names_from = type,
values_from = val,
values_fn = list) |>
tidyr::unnest(cols = c(id, score)) |>
filter(!is.na(id))
abbott_measures
measures_2019 |> count(category)
abbott_measures |>
left_join(measures_2019, by = join_by(year, category, id == measureId))
abbott_measures
abbott_measures |>
left_join(measures_2019,
by = join_by(year, category, id == measureId))
jsonlite::fromJSON("C:/Users/andyb/Desktop/provider_book/data/measures-data_2019.json") |>
mutate(year = 2019,
submissionMethods = NULL,
.before = title) |>
unnest(cols = c(reportingCategory, strata))
jsonlite::fromJSON("C:/Users/andyb/Desktop/provider_book/data/measures-data_2019.json") |>
mutate(year = 2019,
submissionMethods = NULL,
.before = title) |>
unnest(cols = c(reportingCategory)) |>
unnest(cols = c(strata))
measures_2019$strata
measures_2019 <- jsonlite::fromJSON("C:/Users/andyb/Desktop/provider_book/data/measures-data_2019.json") |>
mutate(year = 2019,
submissionMethods = NULL,
.before = title) |>
unnest(cols = c(reportingCategory))
abbott_measures |>
left_join(measures_2019,
by = join_by(year, category, id == measureId))
jsonlite::fromJSON("C:/Users/andyb/Desktop/provider_book/data/measures-data_2019.json") |>
mutate(year = 2019,
submissionMethods = NULL,
eMeasureUuid = NULL,
.before = title) |>
unnest(cols = c(reportingCategory, substitutes))
measures_2019 <- jsonlite::fromJSON("C:/Users/andyb/Desktop/provider_book/data/measures-data_2019.json") |>
mutate(year = 2019,
submissionMethods = NULL,
eMeasureUuid = NULL,
substitutes = NULL,
.before = title) |>
unnest(cols = c(reportingCategory)) |>
janitor::remove_empty(which = c("rows", "cols"))
measures_2019 |>
count(category)
abbott_measures |>
left_join(measures_2019,
by = join_by(year, category, id == measureId))
jsonlite::fromJSON("C:/Users/andyb/Desktop/provider_book/data/measures-data_2019.json") |>
mutate(year = 2019,
submissionMethods = NULL,
eMeasureUuid = NULL,
substitutes = NULL,
.before = title) |>
unnest(cols = c(reportingCategory)) |>
janitor::remove_empty(which = c("rows", "cols"))
measures_2019 <- jsonlite::fromJSON("C:/Users/andyb/Desktop/provider_book/data/measures-data_2019.json") |>
mutate(year = 2019,
submissionMethods = NULL,
eMeasureUuid = NULL,
substitutes = NULL,
.before = title) |>
unnest(cols = c(reportingCategory))
measures_2019 |>
count(category)
abbott_measures |>
left_join(measures_2019,
by = join_by(year, category, id == measureId)) |>
janitor::remove_empty(which = c("rows", "cols"))
abbott_measures |>
left_join(measures_2019,
by = join_by(year, category, id == measureId)) |>
janitor::remove_empty(which = c("rows", "cols")) |>
mutate(group = NULL)
